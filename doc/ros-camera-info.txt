*ros-camera-info.txt*

This page gives an expanded explanation of the parameters in the sensor_msgs/
CameraInfo message. Please also see the comments in the message header file of
CameraInfo, and the calibration wiki pages.

Camera coordinate system~

Below is a diagram of the camera coordinate system assumed by the CameraInfo
message. It is a right-handed system, with the world X and Y aligned with the
image x and y. This is the same coordinate system used in OpenCV. It differs
from the coordinate system of Harley and Zisserman, which has Z forward, Y up,
and X to the left (looking towards +Z).


CameraCoords.png
                           
                     0,0,0  Z       cx,cy   
                       ------------+----   
                       |\ X        |\      
                      Y| \        y| \x    
                       |  \   
                       |   \   
                       |    \  
                       |     \

Derivation diagram~

Below is a diagram of the various images that are conceptually derivable from
the CameraInfo message. The boxed variables are present in this message.

CameraInfo.png



Projection onto the original image~

Starting with an initial 3D point X, the position of the corresponding image
point is found by going right-to-left in the upper half of the diagram. The
process is summarized by the following equations.

X' = [R,t]X   transform
sx = X'       projection
x* = d(x)     distortion
q  = Kx*      pixel coordinates

This process uses the K camera matrix and D distortion vector from CameraInfo.
Ignoring the transform T, you can find the projection of a point X' into the
original camera frame using these equations. First, the 3D point X' is
projected onto the normalized, undistorted image via a projection operation
(division by Z). Then the distortion coefficients are used in the function d()
to move the point to its distorted position, still in a normalized image.
Finally, the normalized image is converted to a pixel-coordinate image by
applying the camera matrix to each image point.

Rectification~

Rectification is the process of transforming the input image into an output
image with the distortion corrected, and optionally transformed by rotation,
in-plane translation, and scale.

Simple monocular rectification~

In this case, there is a monocular device with distortion correction only. To
transform a pixel in the input image into one in the output image, it is sent
through the K - D - R - K' series of transformations. K - D gets to the
normalized, undistorted image; the rotation R is the identity because we don't
want to rotate the image; and then K' converts back to pixel coordinates in the
output image. In this case, since there is no rotation, translation, or scaling
from the original image, K = K' , and only the K and D elements of CameraInfo
are needed.

Projection onto the output image is by the P matrix, which is formed from K' 
and the optional rotation and translation, in this case the identity and 0,
respectively. So (in this case) P is redundant information, and could be formed
directly from K.

Stereo and complex monocular rectification~

Here we apply a transformation to the normalized, undistorted image: it is
rotated and/or translated with respect to the original image. This
transformation is important, for example, in aligning two images of a stereo
pair to lie in the same plane and have coincident epipolar lines.

The transform of a pixel from the input to output image is the same as in the
simple monocular case, except that R need not be the identity, and K' need not
be equal to K. As a consequence, the output image can be rotated, translated,
and scaled relative to the original image.

The projection matrix has an additional parameter, a translational offset t.
This parameter is used in the right stereo camera to reflect its external
position relative to the left camera. Since the point X is transformed by t,
the position of the right camera with respect to the left is given by -t.

Putting this all together, the projection matrix for the rectified output image
is given by:

P = K' [I|t].

Note that in this case the internal camera parameters of the output image, K' ,
can be different from the input image, so P cannot be formed just from K and D.

*ros-camera-info-message*
sensor_msgs/CameraInfo Message~

File: sensor_msgs/CameraInfo.msg

# This message defines meta information for a camera. It should be in a
# camera namespace on topic "camera_info" and accompanied by up to five
# image topics named:
#
#   image_raw - raw data from the camera driver, possibly Bayer encoded
#   image            - monochrome, distorted
#   image_color      - color, distorted
#   image_rect       - monochrome, rectified
#   image_rect_color - color, rectified
#
# The image_pipeline contains packages (image_proc, stereo_image_proc)
# for producing the four processed image topics from image_raw and
# camera_info. The meaning of the camera parameters are described in
# detail at http://www.ros.org/wiki/image_pipeline/CameraInfo.
#
# The image_geometry package provides a user-friendly interface to
# common operations using this meta information. If you want to, e.g.,
# project a 3d point into image coordinates, we strongly recommend
# using image_geometry.
#
# If the camera is uncalibrated, the matrices D, K, R, P should be left
# zeroed out. In particular, clients may assume that K[0] == 0.0
# indicates an uncalibrated camera.

#######################################################################
#                     Image acquisition info                          #
#######################################################################

# Time of image acquisition, camera coordinate frame ID
Header header    # Header timestamp should be acquisition time of image
                 # Header frame_id should be optical frame of camera
                 # origin of frame should be optical center of camera
                 # +x should point to the right in the image
                 # +y should point down in the image
                 # +z should point into the plane of the image


#######################################################################
#                      Calibration Parameters                         #
#######################################################################
# These are fixed during camera calibration. Their values will be the #
# same in all messages until the camera is recalibrated. Note that    #
# self-calibrating systems may "recalibrate" frequently.              #
#                                                                     #
# The internal parameters can be used to warp a raw (distorted) image #
# to:                                                                 #
#   1. An undistorted image (requires D and K)                        #
#   2. A rectified image (requires D, K, R)                           #
# The projection matrix P projects 3D points into the rectified image.#
#######################################################################

# The image dimensions with which the camera was calibrated. Normally
# this will be the full camera resolution in pixels.
uint32 height
uint32 width

# The distortion model used. Supported models are listed in
# sensor_msgs/distortion_models.h. For most cameras, "plumb_bob" - a
# simple model of radial and tangential distortion - is sufficent.
string distortion_model

# The distortion parameters, size depending on the distortion model.
# For "plumb_bob", the 5 parameters are: (k1, k2, t1, t2, k3).
float64[] D

# Intrinsic camera matrix for the raw (distorted) images.
#     [fx  0 cx]
# K = [ 0 fy cy]
#     [ 0  0  1]
# Projects 3D points in the camera coordinate frame to 2D pixel
# coordinates using the focal lengths (fx, fy) and principal point
# (cx, cy).
float64[9]  K # 3x3 row-major matrix

# Rectification matrix (stereo cameras only)
# A rotation matrix aligning the camera coordinate system to the ideal
# stereo image plane so that epipolar lines in both stereo images are
# parallel.
float64[9]  R # 3x3 row-major matrix

# Projection/camera matrix
#     [fx'  0  cx' Tx]
# P = [ 0  fy' cy' Ty]
#     [ 0   0   1   0]
# By convention, this matrix specifies the intrinsic (camera) matrix
#  of the processed (rectified) image. That is, the left 3x3 portion
#  is the normal camera intrinsic matrix for the rectified image.
# It projects 3D points in the camera coordinate frame to 2D pixel
#  coordinates using the focal lengths (fx', fy') and principal point
#  (cx', cy') - these may differ from the values in K.
# For monocular cameras, Tx = Ty = 0. Normally, monocular cameras will
#  also have R = the identity and P[1:3,1:3] = K.
# For a stereo pair, the fourth column [Tx Ty 0]' is related to the
#  position of the optical center of the second camera in the first
#  camera's frame. We assume Tz = 0 so both cameras are in the same
#  stereo image plane. The first camera always has Tx = Ty = 0. For
#  the right (second) camera of a horizontal stereo pair, Ty = 0 and
#  Tx = -fx' * B, where B is the baseline between the cameras.
# Given a 3D point [X Y Z]', the projection (x, y) of the point onto
#  the rectified image is given by:
#  [u v w]' = P * [X Y Z 1]'
#         x = u / w
#         y = v / w
#  This holds for both images of a stereo pair.
float64[12] P # 3x4 row-major matrix


#######################################################################
#                      Operational Parameters                         #
#######################################################################
# These define the image region actually captured by the camera       #
# driver. Although they affect the geometry of the output image, they #
# may be changed freely without recalibrating the camera.             #
#######################################################################

# Binning refers here to any camera setting which combines rectangular
#  neighborhoods of pixels into larger "super-pixels." It reduces the
#  resolution of the output image to
#  (width / binning_x) x (height / binning_y).
# The default values binning_x = binning_y = 0 is considered the same
#  as binning_x = binning_y = 1 (no subsampling).
uint32 binning_x
uint32 binning_y

# Region of interest (subwindow of full camera resolution), given in
#  full resolution (unbinned) image coordinates. A particular ROI
#  always denotes the same window of pixels on the camera sensor,
#  regardless of binning settings.
# The default setting of roi (all values 0) is considered the same as
#  full resolution (roi.width = width, roi.height = height).
RegionOfInterest roi


Expanded Definition

Header header
    uint32 seq
    time stamp
    string frame_id
uint32 height
uint32 width
string distortion_model
float64[] D
float64[9] K
float64[9] R
float64[12] P
uint32 binning_x
uint32 binning_y
RegionOfInterest roi
    uint32 x_offset
    uint32 y_offset
    uint32 height
    uint32 width
    bool do_rectify

vim:tw=78:ts=4:ft=help:norl:
